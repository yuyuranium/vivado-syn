//
// Generated by Bluespec Compiler, version 2023.01-23-g764b7230 (build 764b7230)
//
// On Fri Jul 21 22:25:47 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// not_full                       O     1
// not_empty                      O     1
// top                            O     8 reg
// clk                            I     1 clock
// rst                            I     1 reset
// push_din_i                     I     8
// push                           I     1
// pop                            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifndef BSV_NEGATIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkStack8x16(clk,
		   rst,

		   push_din_i,
		   push,
		   not_full,

		   pop,
		   not_empty,

		   top);
  input  clk;
  input  rst;

  // action method push
  input  [7 : 0] push_din_i;
  input  push;
  output not_full;

  // action method pop
  input  pop;
  output not_empty;

  // value method top
  output [7 : 0] top;

  // signals for module outputs
  wire [7 : 0] top;
  wire not_empty, not_full;

  // register stack_size_r
  reg [4 : 0] stack_size_r;
  wire [4 : 0] stack_size_r$D_IN;
  wire stack_size_r$EN;

  // register stack_stack_mem_0
  reg [7 : 0] stack_stack_mem_0;
  wire [7 : 0] stack_stack_mem_0$D_IN;
  wire stack_stack_mem_0$EN;

  // register stack_stack_mem_1
  reg [7 : 0] stack_stack_mem_1;
  wire [7 : 0] stack_stack_mem_1$D_IN;
  wire stack_stack_mem_1$EN;

  // register stack_stack_mem_10
  reg [7 : 0] stack_stack_mem_10;
  wire [7 : 0] stack_stack_mem_10$D_IN;
  wire stack_stack_mem_10$EN;

  // register stack_stack_mem_11
  reg [7 : 0] stack_stack_mem_11;
  wire [7 : 0] stack_stack_mem_11$D_IN;
  wire stack_stack_mem_11$EN;

  // register stack_stack_mem_12
  reg [7 : 0] stack_stack_mem_12;
  wire [7 : 0] stack_stack_mem_12$D_IN;
  wire stack_stack_mem_12$EN;

  // register stack_stack_mem_13
  reg [7 : 0] stack_stack_mem_13;
  wire [7 : 0] stack_stack_mem_13$D_IN;
  wire stack_stack_mem_13$EN;

  // register stack_stack_mem_14
  reg [7 : 0] stack_stack_mem_14;
  wire [7 : 0] stack_stack_mem_14$D_IN;
  wire stack_stack_mem_14$EN;

  // register stack_stack_mem_15
  reg [7 : 0] stack_stack_mem_15;
  wire [7 : 0] stack_stack_mem_15$D_IN;
  wire stack_stack_mem_15$EN;

  // register stack_stack_mem_2
  reg [7 : 0] stack_stack_mem_2;
  wire [7 : 0] stack_stack_mem_2$D_IN;
  wire stack_stack_mem_2$EN;

  // register stack_stack_mem_3
  reg [7 : 0] stack_stack_mem_3;
  wire [7 : 0] stack_stack_mem_3$D_IN;
  wire stack_stack_mem_3$EN;

  // register stack_stack_mem_4
  reg [7 : 0] stack_stack_mem_4;
  wire [7 : 0] stack_stack_mem_4$D_IN;
  wire stack_stack_mem_4$EN;

  // register stack_stack_mem_5
  reg [7 : 0] stack_stack_mem_5;
  wire [7 : 0] stack_stack_mem_5$D_IN;
  wire stack_stack_mem_5$EN;

  // register stack_stack_mem_6
  reg [7 : 0] stack_stack_mem_6;
  wire [7 : 0] stack_stack_mem_6$D_IN;
  wire stack_stack_mem_6$EN;

  // register stack_stack_mem_7
  reg [7 : 0] stack_stack_mem_7;
  wire [7 : 0] stack_stack_mem_7$D_IN;
  wire stack_stack_mem_7$EN;

  // register stack_stack_mem_8
  reg [7 : 0] stack_stack_mem_8;
  wire [7 : 0] stack_stack_mem_8$D_IN;
  wire stack_stack_mem_8$EN;

  // register stack_stack_mem_9
  reg [7 : 0] stack_stack_mem_9;
  wire [7 : 0] stack_stack_mem_9$D_IN;
  wire stack_stack_mem_9$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_stack_r_pop, WILL_FIRE_RL_stack_r_push;

  // inputs to muxes for submodule ports
  wire [4 : 0] MUX_stack_size_r$write_1__VAL_1,
	       MUX_stack_size_r$write_1__VAL_2;

  // action method push
  assign not_full = stack_size_r != 5'd16 ;

  // action method pop
  assign not_empty = stack_size_r != 5'd0 ;

  // value method top
  assign top = stack_stack_mem_0 ;

  // rule RL_stack_r_push
  assign WILL_FIRE_RL_stack_r_push = push && !pop ;

  // rule RL_stack_r_pop
  assign WILL_FIRE_RL_stack_r_pop = pop && !push ;

  // inputs to muxes for submodule ports
  assign MUX_stack_size_r$write_1__VAL_1 = stack_size_r + 5'd1 ;
  assign MUX_stack_size_r$write_1__VAL_2 = stack_size_r - 5'd1 ;

  // register stack_size_r
  assign stack_size_r$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       MUX_stack_size_r$write_1__VAL_1 :
	       MUX_stack_size_r$write_1__VAL_2 ;
  assign stack_size_r$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_0
  assign stack_stack_mem_0$D_IN =
	     WILL_FIRE_RL_stack_r_pop ? stack_stack_mem_1 : push_din_i ;
  assign stack_stack_mem_0$EN =
	     WILL_FIRE_RL_stack_r_pop || WILL_FIRE_RL_stack_r_push ;

  // register stack_stack_mem_1
  assign stack_stack_mem_1$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_0 :
	       stack_stack_mem_2 ;
  assign stack_stack_mem_1$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_10
  assign stack_stack_mem_10$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_9 :
	       stack_stack_mem_11 ;
  assign stack_stack_mem_10$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_11
  assign stack_stack_mem_11$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_10 :
	       stack_stack_mem_12 ;
  assign stack_stack_mem_11$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_12
  assign stack_stack_mem_12$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_11 :
	       stack_stack_mem_13 ;
  assign stack_stack_mem_12$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_13
  assign stack_stack_mem_13$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_12 :
	       stack_stack_mem_14 ;
  assign stack_stack_mem_13$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_14
  assign stack_stack_mem_14$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_13 :
	       stack_stack_mem_15 ;
  assign stack_stack_mem_14$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_15
  assign stack_stack_mem_15$D_IN = stack_stack_mem_14 ;
  assign stack_stack_mem_15$EN = WILL_FIRE_RL_stack_r_push ;

  // register stack_stack_mem_2
  assign stack_stack_mem_2$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_1 :
	       stack_stack_mem_3 ;
  assign stack_stack_mem_2$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_3
  assign stack_stack_mem_3$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_2 :
	       stack_stack_mem_4 ;
  assign stack_stack_mem_3$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_4
  assign stack_stack_mem_4$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_3 :
	       stack_stack_mem_5 ;
  assign stack_stack_mem_4$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_5
  assign stack_stack_mem_5$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_4 :
	       stack_stack_mem_6 ;
  assign stack_stack_mem_5$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_6
  assign stack_stack_mem_6$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_5 :
	       stack_stack_mem_7 ;
  assign stack_stack_mem_6$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_7
  assign stack_stack_mem_7$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_6 :
	       stack_stack_mem_8 ;
  assign stack_stack_mem_7$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_8
  assign stack_stack_mem_8$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_7 :
	       stack_stack_mem_9 ;
  assign stack_stack_mem_8$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // register stack_stack_mem_9
  assign stack_stack_mem_9$D_IN =
	     WILL_FIRE_RL_stack_r_push ?
	       stack_stack_mem_8 :
	       stack_stack_mem_10 ;
  assign stack_stack_mem_9$EN =
	     WILL_FIRE_RL_stack_r_push || WILL_FIRE_RL_stack_r_pop ;

  // handling of inlined registers

  always@(posedge clk)
  begin
    if (rst == `BSV_RESET_VALUE)
      begin
        stack_size_r <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (stack_size_r$EN)
	  stack_size_r <= `BSV_ASSIGNMENT_DELAY stack_size_r$D_IN;
      end
    if (stack_stack_mem_0$EN)
      stack_stack_mem_0 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_0$D_IN;
    if (stack_stack_mem_1$EN)
      stack_stack_mem_1 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_1$D_IN;
    if (stack_stack_mem_10$EN)
      stack_stack_mem_10 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_10$D_IN;
    if (stack_stack_mem_11$EN)
      stack_stack_mem_11 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_11$D_IN;
    if (stack_stack_mem_12$EN)
      stack_stack_mem_12 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_12$D_IN;
    if (stack_stack_mem_13$EN)
      stack_stack_mem_13 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_13$D_IN;
    if (stack_stack_mem_14$EN)
      stack_stack_mem_14 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_14$D_IN;
    if (stack_stack_mem_15$EN)
      stack_stack_mem_15 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_15$D_IN;
    if (stack_stack_mem_2$EN)
      stack_stack_mem_2 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_2$D_IN;
    if (stack_stack_mem_3$EN)
      stack_stack_mem_3 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_3$D_IN;
    if (stack_stack_mem_4$EN)
      stack_stack_mem_4 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_4$D_IN;
    if (stack_stack_mem_5$EN)
      stack_stack_mem_5 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_5$D_IN;
    if (stack_stack_mem_6$EN)
      stack_stack_mem_6 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_6$D_IN;
    if (stack_stack_mem_7$EN)
      stack_stack_mem_7 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_7$D_IN;
    if (stack_stack_mem_8$EN)
      stack_stack_mem_8 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_8$D_IN;
    if (stack_stack_mem_9$EN)
      stack_stack_mem_9 <= `BSV_ASSIGNMENT_DELAY stack_stack_mem_9$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    stack_size_r = 5'h0A;
    stack_stack_mem_0 = 8'hAA;
    stack_stack_mem_1 = 8'hAA;
    stack_stack_mem_10 = 8'hAA;
    stack_stack_mem_11 = 8'hAA;
    stack_stack_mem_12 = 8'hAA;
    stack_stack_mem_13 = 8'hAA;
    stack_stack_mem_14 = 8'hAA;
    stack_stack_mem_15 = 8'hAA;
    stack_stack_mem_2 = 8'hAA;
    stack_stack_mem_3 = 8'hAA;
    stack_stack_mem_4 = 8'hAA;
    stack_stack_mem_5 = 8'hAA;
    stack_stack_mem_6 = 8'hAA;
    stack_stack_mem_7 = 8'hAA;
    stack_stack_mem_8 = 8'hAA;
    stack_stack_mem_9 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkStack8x16

